#---------------------------------------------------------------------------
# Wandering Hamster - see wander.hss
# Troll Mountain
#---------------------------------------------------------------------------

plotscript, troll mountain autorun, begin
  update troll mountain parallax
end

#---------------------------------------------------------------------------

plotscript,Cactus Sighting on Mountain,begin

  variable(mus)
  mus := current song
  play song(song:Cactus Theme)

  variable (i)
  suspend player
  suspend random enemys
  suspend NPCs
  suspend NPC walls

  for (i,0,3) do (set hero direction (i,north))
  Pan Camera (north,6,2)
  show text box (228)
  wait for all
  advance text box
  walk NPC (17,up,2)
  walk NPC (17,left,2)
  wait for NPC (17)
  walk hero (me,north,5)
  walk NPC (17,left,1)
  wait for NPC (17)
  set NPC direction (17,right)
  wait (2)
  set NPC speed (17,10)
  walk NPC (17,up,1)
  walk NPC (17,left,1)
  wait for NPC
  for (i,0,3) do (set hero direction (i,left))
  walk NPC (17,left,1)
  wait for NPC
  walk NPC (17,south,1)
  walk NPC (17,left,1)
  wait for NPC
  focus camera(heroX(me),heroY(me),2)
  walk NPC (17,south,5)
  spin NPC (17,2,5)
  wait for NPC
  set tag (tag:Troll Mtn Cactus,ON)
  camera follows hero (me)
  
  resume player
  resume random enemys
  resume NPCs
  resume NPC walls
  play song(mus)
end

#---------------------------------------------------------------------------

plotscript, troll mountain map, begin
  show text box(621)
end

#---------------------------------------------------------------------------

plotscript, troll mountain campfire, begin
  suspend player
  suspend random enemies
  suspend NPCs
  suspend obstruction
  suspend hero walls
  suspend caterpillar
  
  variable(x, y)
  x := 90
  y := 20
  walk hero to X(0, x -- 1)
  walk hero to Y(0, y)
  walk hero to X(1, x)
  walk hero to Y(1, y + 1)
  walk hero to X(2, x + 1)
  walk hero to Y(2, y)
  walk hero to X(3, x)
  walk hero to Y(3, y -- 1)
  variable(who)
  for(who, 0, 3) do(
    wait for hero(who)
  )
  set hero direction(0, east)
  set hero direction(1, north)
  set hero direction(2, west)
  set hero direction(3, south)
  wait(1)

  resume player
  resume random enemies
  resume NPCs
  resume obstruction
  resume hero walls
  resume caterpillar
  
  fade and rest
end

#---------------------------------------------------------------------------

plotscript, rock owl flight, begin
  if(inventory(item:trollegg) == 0) then(
    show text box(641)
    wait for text box
    exit script
  )
  delete item(item:trollegg, 1)
  if(hero X(me) < map width / 2) then(
    rock owl flight west to east
  )else(
    rock owl flight east to west
  )
end

script, owl picks up the party, owl, begin
  set NPC speed(owl, 5)
  variable(who)
  for(who, 0, 3 -- room in active party) do(
    owl picks up hero(owl, who)
  )
end

script, owl picks up hero, owl, who, begin
  walk NPC to X(owl, hero X(who))
  walk NPC to Y(owl, hero Y(who) -- (who + 1))
  wait for NPC(owl)
  put npc(owl, NPC pixel X(owl), NPC pixel Y(owl) + 3)
  wait(1)
  put npc(owl, NPC pixel X(owl), NPC pixel Y(owl) -- 3)
  attach hero sprite to owl(owl, who)
end

script, attach hero sprite to owl, owl, who, begin
  variable(owl sl, hero sl, sl)
  owl sl := get owl sl(owl)
  hero sl := lookup slice(sl:walkabout sprite component, get hero slice(who))
  set sprite visible(hero sl, false)
  sl := clone sprite(hero sl)
  set slice lookup(sl, sli:walkabout extra)
  set sprite frame(sl, hero direction(who) * 2)
  set parent(sl, owl sl)
  set slice y(sl, (who + 1) * 16)
end

script, move owl to, guide, owl, tile x, tile y, ticks, flap, begin
  move slice to(guide, tile x*20, tile y*20, ticks)
  while(slice is moving(guide)) do(
    put npc(owl, slice x(guide), slice y(guide))
    update troll mountain parallax
    if(flap) then(
      flap owl wings(owl)
    )else(
      owl glide(owl)
    )
    wait(1)
  )
end

script, get owl sl, owl, begin
  exit returning(lookup slice(sl:walkabout sprite component, get NPC slice(owl)))
end

script, flap owl wings, owl, begin
  variable(owl sl, wings sl)
  owl sl := get owl sl(owl)
  wings sl := lookup slice(sli:wings, owl sl)
  loop frame(wings sl, 0, 2)
end

script, owl glide, owl, begin
  variable(owl sl, wings sl)
  owl sl := get owl sl(owl)
  wings sl := lookup slice(sli:wings, owl sl)
  set sprite frame(wings sl, 0)
end

script, owl drops party, owl, begin
  focus camera(NPC X(owl), NPC Y(owl) + 4, 6)
  variable(who, owl sl, hero sl, sl)
  owl sl := get owl sl(owl)
  for(who, 0, 3) do(
    sl := lookup slice(sli:walkabout extra, owl sl)
    if(not(sl)) then(break)
    set slice lookup(sl, none)
    move slice by(sl, 0, 80 -- slice y(sl), 5)
  )
  wait(5)
  free slice children(owl sl)
  move slice to(owl sl, 0, 0, 4)
  for(who, 0, 3) do(
    set hero position(who, NPC X(owl), NPC Y(owl) + 4)
    hero sl := lookup slice(sl:walkabout sprite component, get hero slice(who))
    set slice visible(hero sl, true)
  )
  wait for camera
  camera follows hero(me)
end

script, recreate owls, begin
  variable(owl)
  owl := create NPC(23, 138, 48)
  set NPC direction(owl, left)
  owl := create NPC(23, 5, 53)
  set NPC direction(owl, right)
end

script, make owl guide, owl, begin
  variable(guide, campoint)
  guide := create container(0, 0)
  set parent(guide, lookup slice(sl:walkabout layer))
  put slice(guide, npc pixel x(owl), npc pixel y(owl))

  campoint := create container(0, 0)
  set parent(campoint, guide)
  set slice x(campoint, 10)
  set slice y(campoint, 10)
  camera follows slice(campoint)
  exit returning(guide)
end

script, rock owl flight west to east, begin
  suspend player
  suspend caterpillar
  
  variable(owl)
  owl := NPC reference(23, 0)
  set NPC obstructs(owl, false)
  set NPC ignores walls(owl, true)
  delete NPC(NPC reference(23, 1))
  
  make flapping owl overlay(owl)
    
  owl picks up the party(owl)
  set NPC direction(owl, north)

  focus camera(NPC X(owl), NPC Y(owl), 10)
  wait for camera

  variable(guide)
  guide := make owl guide(owl)

  move owl to(guide, owl, 46, 32, 2*18, true)
  move owl to(guide, owl, 75, 22, 2*18, true)
  move owl to(guide, owl, 106, 32, 2*18, false)
  move owl to(guide, owl, 138, 46, 2*18, false)

  free slice(guide)
  
  owl drops party(owl)
  resume caterpillar
  walk hero(me, left, 1)
  walk NPC to X(owl, 138)
  walk NPC to Y(owl, 47)
  wait for NPC(owl)
  delete NPC(owl)
  recreate owls
  
  resume player
end

script, rock owl flight east to west, begin
  suspend player
  suspend caterpillar
  
  variable(owl)
  owl := NPC reference(23, 1)
  set NPC obstructs(owl, false)
  set NPC ignores walls(owl, true)
  delete NPC(NPC reference(23, 0))
  
  make flapping owl overlay(owl, true)
    
  owl picks up the party(owl)
  set NPC direction(owl, south)

  focus camera(NPC X(owl), NPC Y(owl), 10)
  wait for camera

  variable(guide)
  guide := make owl guide(owl)

  move owl to(guide, owl, 106, 32, 2*18, true)
  move owl to(guide, owl, 75, 22, 2*18, true)
  move owl to(guide, owl, 46, 32, 2*18, false)
  move owl to(guide, owl, 9, 50, 2*18, false)

  free slice(guide)
  
  owl drops party(owl)
  resume caterpillar
  walk hero(me, left, 1)
  walk NPC to X(owl, 5)
  walk NPC to Y(owl, 53)
  wait for NPC(owl)
  delete NPC(owl)
  recreate owls
  
  resume player
end

script, make flapping owl overlay, owl, flip=false, begin
  variable(owl sl, wing sl)
  owl sl := get owl sl(owl)
  wing sl := load attack sprite(84)
  set slice lookup(wing sl, sli:wings) 
  set parent(wing sl, owl sl)
  center slice(wing sl)
  horiz flip sprite(wing sl, flip)
end

#---------------------------------------------------------------------------

script, update troll mountain parallax, begin
  variable(sl, mapw, maph, screenw, screenh, layerw, layerh)
  if(current map <> map:troll mountain) then(
    stop timer(troll mountain parallax timer)
    #(The following is only needed if 'recreate map slices when leaving map' is off)
    sl := lookup slice(sl:map layer 0)
    set slice x(sl, 0)
    set slice y(sl, 0)
    exit script
  )
  mapw := map width * 20
  maph := map height * 20
  screenw := slice width(sprite layer)
  screenh := slice height(sprite layer)
  layerw := mapw / 3  # e.g. 50 * 20 pixels
  layerh := maph / 3  # e.g. 20 * 20 pixels
  sl := lookup slice(sl:map layer 0)
  calculate next camera pixel xy
  set slice x(sl, (next camera pixel x * (mapw -- layerw) / (mapw -- screenw)))
  set slice y(sl, (next camera pixel y * (maph -- layerh) / (maph -- screenh)))
  # Set the script to run again next tick
  set timer(troll mountain parallax timer, 0, 1, @update troll mountain parallax)
end

#---------------------------------------------------------------------------
# TMC's Parallax support scripts from:
# http://rpg.hamsterrepublic.com/ohrrpgce/Scripts:Hero_will_move

script, dir X, dir, begin
  switch (dir) do (
    case (up, down) do (return (0))
    case (right) do (return (1))
    case (left) do (return (-1))
  )
end

script, dir Y, dir, begin
  switch (dir) do (
    case (left, right) do (return (0))
    case (down) do (return (1))
    case (up) do (return (-1))
  )
end

script, trying to move direction, begin
  return (-1)
  if(top menu) then(exit script)
  if (key is pressed(key:right)) then (return (right))
  if (key is pressed(key:left)) then (return (left))
  if (key is pressed(key:down)) then (return (down))
  if (key is pressed(key:up)) then (return (up))
end

# This will return true if hero 0 will start a new step
# this tick because of player input. There are no commands
# that can tell you that directly: you have to figure it out
# by checking keypresses and for obstructions.
# Note: this doesn't handle all edge cases, like multiple NPCs
# on one tile, NPCs over the edge of the map, or the hero already in motion.
script, hero will move, begin
  variable (dir, npc)

  # If a textbox is up or player is suspended, the hero can't move
  if (current textbox > -1 || player is suspended) then (exit returning (false))

  # Check for player input
  dir := trying to move direction
  if (dir == -1) then (exit returning (false)) 

  # If there's a wall in the way, nothing will happen (unless walls are suspended...)
  if (check hero wall(0, dir)) then (exit returning (false))

  # Check for an NPC in the way which you can't step on
  # (this isn't correct either if obstruction is suspended, or other edge cases)
  npc := npc at spot (hero x(0) + dir x(dir), hero y(0) + dir y(dir))
  if (npc && readNPC(npc, NPCstat:activation) <> NPCactivation:stepon) then (exit returning (false))

  # OK, you will start walking in this direction
  return (true)
end

# Guess the direction that the leader will move this tick, or -1 if they won't move.
script, next leader move direction, begin
  if (hero is walking(0)) then (
    return (hero direction(0))
  ) else if (hero will move) then (
    return (trying to move direction)
  ) else (
    return (-1)
  )
end

# Guess the position the leader will move to this tick
script, next leader pixel x, begin
  variable(ret, dir)
  ret := hero pixel x
  dir := next leader move direction
  if (dir <> -1) then (
    ret += get hero speed(0) * dirX(dir)
  )
  return (ret)
end

# Guess the position the leader will move to this tick
script, next leader pixel y, begin
  variable(ret, dir)
  ret := hero pixel y
  dir := next leader move direction
  if (dir <> -1) then (
    ret += get hero speed(0) * dirY(dir)
  )
  return (ret)
end

# Updates the values of the "next camera pixel x/y" global variables.
# Camera following NPCs or slices are not supported!
script, calculate next camera pixel xy, begin
  variable(destx, desty, diff, cam dir, cam speed)
  variable(mapw, maph, screenw, screenh)
  screenw := slice width(sprite layer)
  screenh := slice height(sprite layer)
  mapw := map width * 20
  maph := map height * 20

  next camera pixel x := camera pixel x
  next camera pixel y := camera pixel y
  # Check value of gen(genCameraMode)
  if (read general(45) == 0) then (   # herocam (camera following hero)
    # Offset from the top-left of the hero sprite to the topleft of the screen
    next camera pixel x := next leader pixel x -- (screenw -- 20) / 2
    next camera pixel y := next leader pixel y -- (screenh -- 20) / 2
  ) else if (read general(45) == 2) then (  #pancam
    cam dir := read general(46)
    cam speed := read general(48)
    next camera pixel x += dirX(cam dir) * cam speed
    next camera pixel y += dirY(cam dir) * cam speed
  ) else if (read general(45) == 3) then (  #focuscam
    destx := read general(46)
    desty := read general(47)
    cam speed := read general(48)
    diff := destx -- camera pixel x
    if (abs(diff) <= cam speed) then (
      next camera pixel x := dest x
    ) else (
      next camera pixel x += sign(diff) * cam speed
    )
    diff := desty -- camera pixel y
    if (abs(diff) <= cam speed) then (
      next camera pixel y := dest y
    ) else (
      next camera pixel y += sign(diff) * cam speed
    )
  )

  # Crop to map edge
  if (next camera pixel x < 0) then (next camera pixel x := 0)
  if (next camera pixel x > mapw -- screenw) then (next camera pixel x := mapw -- screenw)
  if (next camera pixel y < 0) then (next camera pixel y := 0)
  if (next camera pixel y > maph -- screenh) then (next camera pixel y := maph -- screenh)
end

#---------------------------------------------------------------------------
