#---------------------------------------------------------------------------
# Wandering Hamster - see wander.hss
# Common code for card mini-games
#---------------------------------------------------------------------------

define constant(0, suit:null)
define constant(1, suit:diamonds)
define constant(2, suit:spades)
define constant(3, suit:hearts)
define constant(4, suit:clubs)

define constant(104, suitcol:black)
define constant(105, suitcol:red)

define constant(0, cardval:null)
define constant(1, cardval:ace)
define constant(2, cardval:two)
define constant(3, cardval:three)
define constant(4, cardval:four)
define constant(5, cardval:five)
define constant(6, cardval:six)
define constant(7, cardval:seven)
define constant(8, cardval:eight)
define constant(9, cardval:nine)
define constant(10, cardval:ten)
define constant(11, cardval:jack)
define constant(12, cardval:queen)
define constant(13, cardval:king)

script, create a full deck, begin
  variable(col, templ, back, front, card, deck, suit, cardval)
  deck := create container(0,0)
  set slice lookup(deck, sli:cards:deck)
  
  col := load slice collection(0)
  templ := lookup slice(sli:cards:templates, col)
  
  back := slice child(templ, 0)
  for(suit, 1, 4) do(
    for(cardval, 1, 13) do(
      front := slice child(templ, cardval)
      card := create card(suit, cardval, clone slice(front), clone slice(back))
      set parent(card, deck)
    )
  )
  
  free slice(col)
  exit(deck)
end

script, create card, suit, cardval, front, back, begin
  variable(card, w, h)
  w := large(slice width(front), slice width(back))
  h := large(slice height(front), slice height(back))
  card := create select(w, h)
  set slice lookup(card, sli:cards:card)
  realign slice(card, edge:left, edge:top, edge:center, edge:center)
  set parent(back, card)
  set parent(front, card)
  set slice extra(card, 0, suit)
  set slice extra(card, 1, cardval)
  refresh card(card)
  exit(card)
end

script, refresh card, card, begin
  assert is card(card)
  variable(mark, suit, cardval, suitcol, facecolid)
  suit := get slice extra(card, 0)
  cardval := get slice extra(card, 1)
  switch(suit) do(
    case(suit:diamonds)
      suitcol := suitcol:red
      facecolid := 0
    case(suit:spades)
      suitcol := suitcol:black
      facecolid := 1
    case(suit:hearts)
      suitcol := suitcol:red
      facecolid := 0
    case(suit:clubs)
      suitcol := suitcol:black
      facecolid := 1
  )
  # Update numbers
  mark := lookup slice(sli:card:num, card)
  while(mark) do(
    set sprite frame(mark, cardval -- 1)
    set sprite palette(mark, suitcol)
    mark := lookup next slice(sli:card:num, mark, card)
  )
  # Update big suit icons
  mark := lookup slice(sli:card:suit, card)
  while(mark) do(
    set sprite frame(mark, suit -- 1)
    set sprite palette(mark, suitcol)
    mark := lookup next slice(sli:card:suit, mark, card)
  )
  # Update tiny suit icons
  mark := lookup slice(sli:card:tinysuit, card)
  while(mark) do(
    set sprite frame(mark, suit + 3)
    set sprite palette(mark, suitcol)
    mark := lookup next slice(sli:card:tinysuit, mark, card)
  )
  # Update face card palettes
  variable(facepic)
  facepic := lookup slice(sli:card:facepic, card)
  if(facepic) then(
    set select slice index(facepic, facecolid)
  )
  randomize card border shade(card)
end

script, randomize card border shade, card, begin
  variable(back)
  back := lookup slice(sli:card:back, card)
  set rect fg col(back, random(249, 252))
end

script, assert is card, card, begin
  if(get slice lookup(card) <> sli:cards:card) then(
    script error(string sprintf(0, $1="slice %d should have code 'sli:cards:card' but found '%s' instead", card, get slice lookup name(2, get slice lookup(card))))
    exit(false)
  )
  exit(true)
end

script, for each card, sl, func, delay=0, begin
  variable(card)
  card := lookup slice(sli:cards:card, sl)
  while (card) do (
    run script by id(func, card)
    if(delay > 0) then(wait(delay))
    card := lookup next slice(sli:cards:card, card, sl)
  )
end

script, flip all cards face up, sl, delay=0, begin
  for each card(sl, @flip card face up, delay)
end

script, flip card face up, card, begin
  assert is card(card)
  set select slice index(card, 1)
end

script, flip all cards face down, sl, delay=0, begin
  for each card(sl, @flip card face down, delay)
end

script, flip card face down, card, begin
  assert is card(card)
  randomize card border shade(card)
  set select slice index(card, 0)
end

script, spread out cards, sl, voverlap=0, begin
  variable(card, x, y, sx, sy)
  card := lookup slice(sli:cards:card, sl)
  while (card) do (
    sx := slice width(card) / 2 + 1 + x * (slice width(card) + 1)
    sy := slice height(card) / 2 + 1 + y * (slice height(card) + 1 -- voverlap)
    x += 1
    if(sx + slice width(card) / 2 + 1 > slice width(sprite layer) -- slice width(card)) then(
      x := 0
      y += 1
    )
    move slice to screen pos(card, sx, sy, second / 2)
    card := lookup next slice(sli:cards:card, card, sl)
  )
end

script, reparent cards, oldparent, newparent, begin
  variable(card, next)
  card := lookup slice(sli:cards:card, oldparent)
  while(card) do(
    next := lookup next slice(sli:cards:card, card, oldparent)
    gently reparent(card, newparent)
    card := next
  )
end

script, wait for all cards, sl, begin
  variable(card)
  card := lookup slice(sli:cards:card, sl)
  while(card) do(
    while(slice is moving(card)) do(wait(1))
    card := lookup next slice(sli:cards:card, card, sl)
  )
end

script, count cards, sl, begin
  variable(card, count)
  count := 0
  card := lookup slice(sli:cards:card, sl)
  while(card) do(
    count += 1
    card := lookup next slice(sli:cards:card, card, sl)
  )
  exit(count)
end

script, visually shuffle cards, sl, endx, endy, repetitions=3, begin
  variable(rep)
  for(rep, 1, repetitions) do(
    variable(i, count, index, relx, rely, card)
    index := 0
    count := count cards(sl)
    # Cut the deck
    card := lookup slice(sli:cards:card, sl)
    while(card) do(
      relx := slice width(card) * -1
      rely := count / 3 + index / 3
      move slice by(card, relx, endy -- rely, second / 2)
      index += 1
      card := lookup next slice(sli:cards:card, card, sl)
      if(index >= count / 2) then(break)
    )
    while(card) do(
      relx := slice width(card)
      rely := count / 3 + index / 3
      move slice by(card, relx, endy -- rely, second / 2)
      index += 1
      card := lookup next slice(sli:cards:card, card, sl)
    )
    wait for all cards(sl)
    # Assign random numbers to the whole deck's sort order
    card := lookup slice(sli:cards:card, sl)
    while(card) do(
      set sort order(card, random(-1000000, 1000000))
      card := lookup next slice(sli:cards:card, card, sl)
    )
    sort children(sl, true)
    # Move them back into a stack
    index := 0
    card := lookup slice(sli:cards:card, sl)
    while(card) do(
      rely := index / 3
      move slice to(card, endx, endy -- rely, second / 3)
      index += 1
      card := lookup next slice(sli:cards:card, card, sl)
    )
    wait for all cards(sl)
  )
end



