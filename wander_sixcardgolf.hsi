#---------------------------------------------------------------------------
# Wandering Hamster - see wander.hss
# Six-Card-Golf Mini-Game
#---------------------------------------------------------------------------

define constant(
  0, sixgolf:state:setup
  1, sixgolf:state:drawchoice
  2, sixgolf:state:choose
  3, sixgolf:state:next turn
  4, sixgolf:state:victory check
  5, sixgolf:state:game over
)

plotscript, begin the six card golf game, begin
  suspend player
  
  sixgolf:pregame silliness
  
  # Change music
  variable(saved song)
  saved song := current song
  play song(song:title theme)

  # Load the table
  variable(table, deck, card)
  table := load slice collection(7)
  resize extra(table, 4)
  set slice lookup(table, sli:cards:table)
  remove all slices with code(sli:cards:placeholder, table)
  
  # Update the player portrait
  sixgolf:update player face(table)
  
  # Set turn indicator
  sixgolf:set turn(table, 1)
  # Set state machine id
  set slice extra(table, 1, sixgolf:state:setup)
  # Set ai counter
  sixgolf:set ai counter(table, 0)

  sixgolf:prompt(table, $0="Six Card Golf")
  sixgolf:prompt2(table, $0="")
  sixgolf:set score text(table, 0, $0="")
  sixgolf:set score text(table, 1, $0="")
  
  # Lookup codes
  variable(deck pile)
  deck pile := lookup slice(sli:cards:deckpile, table)
  
  # Prepare the deck
  deck := create a full deck
  set parent(deck, table)
  move slice to(deck, slice screen x(deck pile), slice screen y(deck pile), second/2)
  wait for slice(deck)
  reparent cards(deck, deck pile)
  free slice(deck), deck := none
  
  # Shuffle the deck
  sixgolf:prompt(table, $0="Shuffling...")
  variable(i)
  visually shuffle cards(deck pile, slice width(deck pile) / 2, slice height(deck pile) / 2)
  sixgolf:prompt(table, $0="")
  wait(second)
  
  # Deal 6 cards to each player
  sixgolf:prompt(table, $0="Each player gets six cards")
  sixgolf:deal cards(table, sli:cards:dealer area)
  sixgolf:deal cards(table, sli:cards:player area)
  wait for all cards(table)
  
  # Flip one card to the discard pile
  card := last child(deck pile)
  sixgolf:discard(card)

  # Reveal two of your cards
  sixgolf:reveal two(table, 0)
  sixgolf:reveal two(table, 1)

  set slice extra(table, 1, sixgolf:state:drawchoice)
  
  while(true) do(
    # Play happens here
    switch(get slice extra(table, 1)) do(
      case(sixgolf:state:drawchoice)
        sixgolf:draw choice(table)
      case(sixgolf:state:choose)
        sixgolf:choose(table)
      case(sixgolf:state:victory check)
        sixgolf:victory check(table)
      case(sixgolf:state:next turn)
        sixgolf:next turn(table)
      case(sixgolf:state:game over)
        sixgolf:grand totals(table)
        break(2)
    )
    wait(1)
    if(keyval(key:esc) >= 1) then(break)
  )
  clean up six card golf game(table)
  play song(saved song)
  sixgolf:postgame silliness
  resume player
end

script, clean up six card golf game, table, begin
  free slice(table)
  $0=""
  $1=""
  $2=""
  $3=""
end

script, sixgolf:pregame silliness, begin
  pathfind hero to(me, 15, 49)

  variable(pals)
  pals := 41
  focus camera(npc x(pals), npc y(pals), 10)
  wait for camera
  camera follows npc(pals)
  if(check tag(tag:know card souls)) then(
    show text box(1036)
    pathfind npc to(pals, 17, 46)
    wait for npc(pals)
    set npc direction(pals, north)
    play sound(sfx:treasure blip)
    wait(2)
    set hero direction(me, north)
    pathfind npc to(pals, 15, 47)
    wait for npc(pals)
    set npc direction(pals, south)
  )else(
    show text box(1037)
  )
  
  wait for hero(me)
  set hero direction(me, north)
  wait for text box
end

script, sixgolf:postgame silliness, begin
  if(sixgolf:dealer total <= sixgolf:player total) then(
    $0="Some day you might catch up!"
  )else(
    $0="I'll catch up to you someday!"
  )
  show text box(1026)
  wait for text box

  if(check tag(tag:know card souls) == false) then(
    show text box(1027)
    wait for text box
    set tag(tag:know card souls, true)
  )
  if(sixgolf:last win) then(
    switch(sixgolf:player wins) do(
      case(2, 10, 20, 30, 40, 50, 60, 70, 80, 90)
        show text box(1031)
        wait for text box
      case(5)
        show text box(1032)
        wait for text box
    )
  )
  focus camera(hero x(me), hero y(me), 10)
  wait for camera
  camera follows hero(me)
end

script, sixgolf:deal cards, table, code, begin
  variable(deck pile)
  deck pile := lookup slice(sli:cards:deck pile, table)
  variable(dest)
  dest := lookup slice(code, table)
  variable(i, card)
  # Six cards
  for(i, 0, 5) do(
    card := last child(deck pile)
    assert is card(card)
    gently reparent(card, dest)
    gently realign slice(card, edge:center, edge:center)
    move slice to(card, 0, 0, second / 2)
    wait(second / 4)
  )
  wait for all cards(dest)
  card := first child(dest)
  while(card) do(
    gently realign slice(card, edge:left, edge:top)
    card := next sibling(card)
  )
end

script, sixgolf:discard, card, begin
  assert is card(card)
  variable(table)
  table := lookup ancestor(sli:cards:table, card)
  if(not(table)) then(script error($0="sixgolf:discard: Whoops! Can't find table from card"), exit)
  variable(discard)
  discard := lookup slice(sli:cards:discard pile, table)
  gently reparent(card, discard)
  gently realign slice(card, edge:center, edge:center)
  variable(rely)
  rely := count cards(discard) / 3
  move slice to(card, 0, 0 -- rely, second / 2)
  wait for slice(card)
  gently realign slice(card, edge:left, edge:top)
  flip card face up(card)
end

script, sixgolf: draw choice, table, begin
  sixgolf: handle empty draw pile(table)

  sixgolf:prompt by turn(table, $0="Dealer's draw", $1="Draw a card")

  variable(deck pile, discard pile, draw choice)
  deck pile := lookup slice(sli:cards:deckpile, table)
  discard pile := lookup slice(sli:cards:discardpile, table)
  draw choice := lookup slice(sli:cards:drawchoice, table)
  
  variable(card)
  card := last child(deck pile)
  assert is card(card)
  gently reparent(card, draw choice)
  card := last child(discard pile)
  assert is card(card)
  gently reparent(card, draw choice)
  
  variable(ai)
  card := none
  while(not(card)) do(
    ai := none
    if(sixgolf:turn(table) == 0) then(ai := @sixgolf:draw ai)
    card := select a card(draw choice, ai)
    wait(1)
  )
  assert is card(card)
  
  move slice by(card, 0, slice height(card) * 2 / 3 * -1, second / 2)
  wait for slice(card)
  flip card face up(card)
  
  # Return the other card to its pile
  if(slice child index(card) == 0) then(
    # other card goes to the discard pile
    gently reparent(last child(draw choice), discard pile)
  )else(
    # other card goes to the draw pile
    gently reparent(first child(draw choice), deck pile)
  )
  
  # Advance the table state machine
  set slice extra(table, 1, sixgolf:state:choose)
  
end

script, sixgolf:choose, table, begin

  variable(area)
  area := sixgolf:get current player area(table)
  
  variable(draw choice, new card)
  draw choice := lookup slice(sli:cards:drawchoice, table)
  new card := first child(draw choice)
  assert is card(new card)

  sixgolf:prompt by turn(table, $0="Dealer's turn", string sprintf(1, $2="Keep this %s?\nWhere to put it?", card short name(3, new card)))

  variable(card, ai)
  card := none
  while(not(card)) do(
    ai := none
    if(sixgolf:turn(table) == 0) then(ai := @sixgolf:chooser ai)
    card := select a card(area, ai, sli:cards:discard pile, @sixgolf:chooser callback)
    sixgolf:prompt2(table, $0="")
    wait(1)
    if(card == none) then(
      if(sixgolf:turn(table) == 0) then(
        # No confirmation for dealer
        set tag(tag:sixgolf:choice, true)
      )else(
        # Player must confirm cancellation
        card short name(0, new card)
        show text box(1024)
        wait for text box
      )
      if(check tag(tag:sixgolf:choice)) then(
        sixgolf:prompt(table, $0="Discarding...")
        sixgolf:discard(new card)
        sixgolf:recalc score for current turn(table)
        set slice extra(table, 1, sixgolf:state:victory check)
        exit
      )
    )
  )
  assert is card(card)

  sixgolf:prompt(table, $0="")
  
  if(card is face down(card)) then(
    flip card face up(card)
    wait(second)
  )

  sixgolf:prompt(table, string sprintf(0, $1="Replace %s", card short name(3, card)))

  move slice to screen pos(new card, slice screen x(card), slice screen y(card), second / 2)
  move slice by(card, 20 * sixgolf:away from player(table), -10, second / 2)
  wait for slice(card)
  wait for slice(new card)
  variable(after)
  after := previous sibling(card)
  gently reparent(card, draw choice)
  if(after) then(
    move slice above(new card, after)
  )else(
    set parent(new card, area)
    slice to back(new card)
  )
  realign slice(new card, edge:center, edge:center)
  set slice x(new card, 0)
  set slice y(new card, 0)
  gently realign slice(new card, edge:left, edge:top)
  sixgolf:discard(card)
  sixgolf:recalc score for current turn(table)
  
  set slice extra(table, 1, sixgolf:state:victory check)
  
end

script, sixgolf:chooser callback, card, begin
  # Called each time the focused card changes
  variable(table)
  table := lookup ancestor(sli:cards:table, card)
  sixgolf:prompt2(table, $0="")
  sixgolf:refresh canceled cards(table, sixgolf:turn(table))

  variable(draw choice, new card)
  draw choice := lookup slice(sli:cards:drawchoice, table)
  new card := first child(draw choice)

  variable(dup, area, cardval, index)
  cardval := get cardval(new card)
  if (cardval == cardval:two) then(exit)
  area := sixgolf:get current player area(table)
  index := slice child index(card) ,mod, 2
  dup := sixgolf:seek duplicate card(area, cardval, index)
  if(dup && dup <> card) then(
    sixgolf:prompt2(table, string sprintf(0, $1="Pair of %s\nin same column\ncancels out.\nThat is good!", card short name(2, dup)))
  )
end

script, sixgolf:next turn, table, begin
  variable(turn)
  turn := sixgolf:turn(table)
  sixgolf:set turn(table, (turn ,xor, 1))
  set slice extra(table, 1, sixgolf:state:drawchoice)
end

script, sixgolf:turn, table, begin
  exit(get slice extra(table, 0))
end

script, sixgolf:set turn, table, turn, begin
  exit(set slice extra(table, 0, turn))
end

script, sixgolf:get current player area, table, begin
  variable(turn)
  turn := sixgolf:turn(table)
  exit(sixgolf:get player area(table, turn))
end

script, sixgolf:get player area, table, turn, begin
  if(turn) then(
    exit(lookup slice(sli:cards:player area, table))
  )else(
    exit(lookup slice(sli:cards:dealer area, table))
  )
end

script, sixgolf:away from player, table, begin
  variable(turn)
  turn := sixgolf:turn(table)
  if(turn) then(
    exit(-1)
  )else(
    exit(1)
  )
end

script, sixgolf:towards player, table, begin
  variable(turn)
  turn := sixgolf:turn(table)
  if(turn) then(
    exit(1)
  )else(
    exit(-1)
  )
end

script, sixgolf:prompt, table, string id, begin
  variable(txt)
  txt := lookup slice(sli:cards:prompt text, table)
  set slice text(txt, string id)
end

script, sixgolf:prompt2, table, string id, begin
  variable(txt)
  txt := lookup slice(sli:cards:prompt2, table)
  set slice text(txt, string id)
end

script, sixgolf:prompt by turn, table, dealer string, player string, begin
  variable(turn)
  turn := sixgolf:turn(table)
  sixgolf:prompt by turn id(table, turn, dealer string, player string)
end

script, sixgolf:prompt by turn id, table, turn, dealer string, player string, begin
  if(turn) then(
    sixgolf:prompt(table, player string)
  )else(
    sixgolf:prompt(table, dealer string)
  )
end

script, sixgolf: handle empty draw pile, table, begin
  variable(deck pile, discard pile)
  deck pile := lookup slice(sli:cards:deck pile)

  if(count cards(deck pile) == 0) then(

    sixgolf:prompt(table, $0="Oops! Time to shuffle")
    discard pile := lookup slice(sli:cards:discard pile)
    reparent cards(discard pile, deck pile)
    flip all cards face down(deck pile)
    visually shuffle cards(deck pile, slice width(deck pile) / 2, slice height(deck pile) / 2)
  
    # Flip one card to the discard pile
    variable(card)
    card := last child(deck pile)
    sixgolf:discard(card)
  )
end

script, sixgolf:reveal two, table, turn, begin
  variable(area)
  area := sixgolf:get player area(table, turn)
  sixgolf: prompt by turn id(table, turn, $0="Dealer reveals two", $1="Reveal two cards please")

  variable(i, ai)
  variable(card)
  sixgolf:set turn(table, turn)
  for(i, 0, 1) do(
    card := none
    while(true) do(
      ai := none
      if(turn == 0) then(ai := @sixgolf:reveal two ai)
      card := select a card(area, ai)
      wait(1)
      if(card) then(
        if(card is face down(card)) then(
          flip card face up(card)
          sixgolf:recalc score(table, turn)
          break
        )
      )
    )
  )
  sixgolf:set turn(table, 1)
end

script, sixgolf:recalc score for current turn, table, begin
  variable(turn)
  turn := sixgolf:turn(table)
  sixgolf:recalc score(table, turn)
end

script, sixgolf:recalc score, table, turn, begin
  variable(score)
  score := sixgolf:get score(table, turn)
  # Convert to score string
  string sprintf(0, $1="Score: %d", score)
  sixgolf:set score text(table, turn, 0)
end

script, sixgolf:get score, table, turn, guess unknown=false, override=none, oindex=0, begin
  variable(area)
  area := sixgolf:get player area(table, turn)
  variable(score, unknown, cancl)
  score := 0
  unknown := 0
  variable(real card, card, index)
  index := 0
  real card := first child(area)
  while(real card) do(
    if(override && index == oindex) then(
      card := override
    )else(
      card := real card
    )
    assert is card(card)
    sixgolf:refresh canceled cards(table, turn, override, oindex)
    if(card is face up(card)) then(
      cancl := get slice extra(card, 2)
      if(not(cancl)) then(
        score += sixgolf:score by card(card)
      )
    )else(
      unknown += 1
      if(guess unknown) then(
        score += 7
      )
    )
    index += 1
    real card := next sibling(real card)
  )
  exit(score)
end

script, sixgolf:set score text, table, turn, strid, begin
  variable(txt)
  txt := sixgolf:score slice by turn(table, turn)
  set slice text(txt, strid)
end

script, sixgolf:score slice by turn, table, turn, begin
  variable(txt)
  if(turn) then(
    txt := lookup slice(sli:cards:player score, table)
  )else(
    txt := lookup slice(sli:cards:dealer score, table)
  )
  exit(txt)
end

script, sixgolf:score by card, card, begin
  assert is card(card)
  variable(cardval)
  cardval := get cardval(card)
  exit(sixgolf:score by cardval(cardval))
end

script, sixgolf:score by cardval, cardval, begin
  variable(score)
  switch(cardval) do(
    case(cardval:null)  score := 0
    case(cardval:ace)   score := 1
    case(cardval:two)   score := -2
    case(cardval:three) score := 3
    case(cardval:four)  score := 4
    case(cardval:five)  score := 5
    case(cardval:six)   score := 6
    case(cardval:seven) score := 7
    case(cardval:eight) score := 8
    case(cardval:nine)  score := 9
    case(cardval:ten)   score := 10
    case(cardval:jack)  score := 10
    case(cardval:queen) score := 10
    case(cardval:king)  score := 10
    else(score := 0)
  )
  exit(score)
end

script, sixgolf:refresh canceled cards, table, turn, override=none, oindex=0, begin
  variable(area)
  area := sixgolf:get player area(table, turn)
  variable(real card, card, dup, row, index, cardval)
  card := first child(area)
  while(card) do(
    set slice extra(card, 2, false)
    card := next sibling(card)
  )
  if(override) then(
    set slice extra(override, 2, false)
  )
  index := 0
  real card := first child(area)
  while(real card) do(
    card := real card
    if(override && index == oindex) then(card := override)
    assert is card(card)
    if(card is face up(card)) then(
      row := index ,mod, 2
      cardval := get cardval(card)
      if(cardval <> cardval:two) then(
        dup := sixgolf:seek duplicate card(area, cardval, index, override, oindex)
        if(dup) then(
          set slice extra(card, 2, true)
          set slice extra(dup, 2, true)
        )
      )
    )
    real card := next sibling(real card)
    index += 1
  )
end

script, sixgolf:seek duplicate card, area, cardval, index, override=none, oindex=0, begin
  variable(real card, card, i, row, r, cv, cncl)
  row := index ,mod, 2
  real card := first child(area)
  i := 0
  while(real card) do(
    card := real card
    if(override && i == oindex) then(card := override)
    assert is card(card)
    if(card is face up(card)) then(
      r := i ,mod, 2
      if(r == row && i <> index) then(
        cncl := get slice extra(card, 2)
        if(not(cncl)) then(
          cv := get slice extra(card, 1)
          if(cv == cardval) then(
            exit(card)
          )
        )
      )
    )
    real card := next sibling(real card)
    i += 1
  )
  exit(none)
end


script, sixgolf:victory check, table, begin
  variable(area, done, who)
  done := false
  for(who, 0, 1) do(
    area := sixgolf:get player area(table, who)
    if(count face up cards(area) == 6) then(
      done := true
      sixgolf:prompt by turn id(table, who, $0="Dealer ended the round", $1="You ended the round")
    )
  )
  if(done) then(
    play sound(sfx:treasure blip)
    wait(second * 2)
    sixgolf:prompt(table, $0="Showing all cards")
    variable(card)
    for(who, 0, 1) do(
      area := sixgolf:get player area(table, who)
      card := first child(area)
      assert is card(card)
      while(card) do(
        if(card is face down(card)) then(
          flip card face up(card)
        )
        move slice by(card, -3, -1, second / 10)
        wait for slice(card)
        move slice by(card, 3, 1, second / 10)
        wait for slice(card)
        wait(second / 6)
        sixgolf:recalc score(table, who)
        card := next sibling(card)
      )
    )
    variable(winner)
    winner := sixgolf:winner(table)
    sixgolf:prompt by turn id(table, winner, $0="Dealer Won!", $1="You Won!")
    if(winner) then(
      play song(song:victory dance)
    )else(
      play song(song:game over)
    )
    wait(second / 2)
    while(true) do(
      sixgolf:victory animation(table)
      if(keypress(use key)) then(break)
      if(mouse release(left button)) then(break)
      wait(1)
    )
    set slice extra(table, 1, sixgolf:state:game over)
    exit
  )
  set slice extra(table, 1, sixgolf:state:next turn)
end

script, sixgolf:winner, table, begin
  variable(dealer score, player score)
  dealer score := sixgolf:get score(table, 0)
  player score := sixgolf:get score(table, 1)
  if(player score < dealer score) then(
    exit(1)
  )else(
    exit(0)
  )
end

script, sixgolf:set ai counter, table, val, begin
  set slice extra(table, 2, val)
end

script, sixgolf:get ai counter, table, begin
  exit(get slice extra(table, 2))
end

script, sixgolf:ai counter, table, begin
  variable(ctr)
  ctr := sixgolf:get ai counter(table)
  if(ctr > 0) then(
    ctr -= 1
    sixgolf:set ai counter(table, ctr)
  )
  exit(ctr)
end

script, sixgolf:set ai state, table, val, begin
  set slice extra(table, 3, val)
end

script, sixgolf:get ai state, table, begin
  exit(get slice extra(table, 3))
end

script, sixgolf:reveal two ai, table, cursor, init, begin
  variable(area, card)
  if(init) then(
    # First wait a bit
    sixgolf:set ai state(table, 0)
    sixgolf:set ai counter(table, second / 2)
  )
  if(sixgolf:ai counter(table) > 0) then(
    exit(card ai:wait)
  )
  if(slice is moving(cursor)) then(
    exit(card ai:wait)
  )
  switch(sixgolf:get ai state(table)) do(
    case(0)
      # Pick a random card
      area := sixgolf:get current player area(table)
      card := random slice child(area)
      assert is card(card)
      if(card is face down(card)) then(
        sixgolf:set ai state(table, 1)
        exit(card)
      )
    case(1)
      sixgolf:set ai counter(table, second / 4)
      sixgolf:set ai state(table, 2)
    case(2)
      exit(card ai:confirm)
  )
  exit(card ai:wait)
end

script, sixgolf:draw ai, table, cursor, init, begin
  variable(drawchoice, area, card)
  if(init) then(
    # First wait a bit
    sixgolf:set ai state(table, 0)
    sixgolf:set ai counter(table, second / 2)
  )
  if(sixgolf:ai counter(table) > 0) then(
    exit(card ai:wait)
  )
  if(slice is moving(cursor)) then(
    exit(card ai:wait)
  )
  drawchoice := lookup slice(sli:cards:drawchoice, table)
  area := sixgolf:get current player area(table)
  switch(sixgolf:get ai state(table)) do(
    case(0)
      # Check if the visible card is a good one
      card := last child(drawchoice)
      assert is card(card)
      if(sixgolf:brute force(table, card)) then(
        sixgolf:set ai state(table, 1)
        exit(card)
      )
      sixgolf:set ai state(table, 3)
    case(1) # confirm after delay
      sixgolf:set ai counter(table, second / 4)
      sixgolf:set ai state(table, 2)
    case(2)
      exit(card ai:confirm)
    case(3)
      # take the hidden card
      card := first child(drawchoice)
      assert is card(card)
      sixgolf:set ai state(table, 1)
      exit(card)
  )
  exit(card ai:wait)
end

script, sixgolf:brute force, table, card, begin
  # Brute force check each placement of a card
  # return the best one to replace
  variable(turn, area)
  turn := sixgolf:turn(table)
  area := sixgolf:get current player area(table)
  variable(old score, new score)
  old score := sixgolf:get score(table, turn, true)
  variable(i, c, best score, best)
  best := none
  best score := 1000000
  for(i, 0, 5) do(
    c := slice child(area, i)
    assert is card(c)
    new score := sixgolf:get score(table, turn, true, card, i)
    if(new score < old score) then(
      if(new score < best score) then(
        # Found a better card to replace
        best score := new score
        best := c
      )else if(new score == best score) then(
        # Found an equally good place to put it, flip a coin
        if(random(0, 1) == 0) then(
          best := c
        )
      )
    )
    #variable(besti)
    #besti := -1
    #if(best) then(besti := slice child index(best))
    #show string(string sprintf(0, $1="i=%d o=%d n=%d b=%d", i, old score, new score, besti))
    #wait(second/6)
    #wait for key(use key)
  )
  exit(best)
end

script, sixgolf:chooser ai, table, cursor, init, begin
  variable(drawchoice, area, card)
  if(init) then(
    # First wait a bit
    sixgolf:set ai state(table, 0)
    sixgolf:set ai counter(table, random(second / 2, second))
  )
  if(sixgolf:ai counter(table) > 0) then(
    exit(card ai:wait)
  )
  if(slice is moving(cursor)) then(
    exit(card ai:wait)
  )
  drawchoice := lookup slice(sli:cards:drawchoice, table)
  card := first child(drawchoice)
  assert is card(card)
  area := sixgolf:get current player area(table)
  switch(sixgolf:get ai state(table)) do(
    case(0)
      # Check if there is any good place to put the card
      variable(best)
      best := sixgolf:brute force(table, card)
      if(best) then(
        sixgolf:set ai state(table, 1)
        exit(best)
      )
      sixgolf:set ai state(table, 3)
    case(1) # confirm after delay
      sixgolf:set ai counter(table, second / 4)
      sixgolf:set ai state(table, 2)
    case(2)
      exit(card ai:confirm)
    case(3)
      # Discard the card unplayed
      exit(card ai:cancel)
  )
  exit(card ai:wait)
end

script, sixgolf: grand totals, table, begin
  if(sixgolf:winner(table)) then(
    sixgolf:last win := 1
    sixgolf:player wins += 1
  )else(
    sixgolf:last win := 0
    sixgolf:dealer wins += 1
  )
  sixgolf:dealer total += sixgolf:get score(table, 0)
  sixgolf:player total += sixgolf:get score(table, 1)
  if(sixgolf:winner(table)) then(
    $0="You win! Good game! Well Played!"
  )else(
    $0="Dealer wins, better luck next time"
  )
  show text box(1025)
  while(true) do(
    sixgolf:victory animation(table)
    if(current text box == -1) then(break)
    wait(1)
  )
end

script, sixgolf:update player face, table, begin
  variable(pic)
  pic := lookup slice(sli:cards:player face, table)
  set sprite set number(pic, get hero picture(find hero(hero by rank(me)), hero portrait))
end

script, sixgolf:victory animation, table, begin
  variable(sl, winner, face, x, y, ch, nxt)
  winner := sixgolf:winner(table)
  if(winner) then(
    face := lookup slice(sli:cards:player face, table)
  )else(
    face := lookup slice(sli:cards:dealer face, table)
  )
  # Fade out pictures
  if(random(0,2) == 0) then(
    sl := lookup slice(sli:card:facepic, table)
    ch := lookup slice(sli:card:sprite, sl)
    while(ch) do(
      nxt := lookup next slice(sli:card:sprite, ch, sl)
      set slice lookup(ch, sli:cards:anim)
      dissolve sprite(ch, dissolve:fade, random(second / 4, second * 3 / 4))
      set slice extra(ch, 0, 1)
      gently reparent(ch, table)
      ch := nxt
    )
    free slice(sl)
    sl := none
  )
  # Launch card marks
  variable(i)
  for(i, 0, 3) do(
    switch(i) do(
      case(0,1)
        sl := lookup slice(sli:card:suit)
      case(2)
        sl := lookup slice(sli:card:tinysuit)
      case(3)
        sl := lookup slice(sli:card:num)
    )
    if(sl) then(
      gently reparent(sl, table)
      set slice lookup(sl, sli:cards:anim)
      x := slice screen x(face) + slice edge x(face, edge:center) + random(-20, 20)
      y := slice screen y(face) + slice edge y(face, edge:center) + random(-20, 20)
      move slice to screen pos(sl, x, y, random(second / 2, second))
    )
  )
  # Animate card marks
  sl := first child(table)
  while(sl) do(
    nxt := lookup next slice(sli:cards:anim, sl, table)
    if(get slice lookup(sl) == sli:cards:anim) then(
      if(not(slice is moving(sl))) then(
        if(not(sprite is dissolving(sl))) then(
          if(get slice extra(sl, 0) == 1) then(
            free slice(sl)
          )else(
            dissolve sprite(sl, dissolve:puff, random(second / 4, second * 3 / 4))
            set slice extra(sl, 0, 1)
          )
        )
      )
    )
    sl := nxt
  )
end

