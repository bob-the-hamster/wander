#---------------------------------------------------------------------------
# Wandering Hamster - see wander.hss
# Six-Card-Golf Mini-Game
#---------------------------------------------------------------------------

define constant(
  0, sixgolf:state:setup
  1, sixgolf:state:drawchoice
  2, sixgolf:state:choose
  3, sixgolf:state:nextturn
)

plotscript, begin the six card golf game, begin
  suspend player

  # Load the table
  variable(table, deck, card)
  table := load slice collection(7)
  set slice lookup(table, sli:cards:table)
  remove all slices with code(sli:cards:placeholder, table)
  # Set turn indicator
  set slice extra(table, 0, 1)
  # Set state machine id
  set slice extra(table, 1, sixgolf:state:setup)

  sixgolf:prompt(table, $0="Six Card Golf")
  
  # Lookup codes
  variable(deck pile)
  deck pile := lookup slice(sli:cards:deckpile, table)
  
  # Prepare the deck
  deck := create a full deck
  set parent(deck, table)
  move slice to(deck, slice screen x(deck pile), slice screen y(deck pile), second/2)
  wait for slice(deck)
  reparent cards(deck, deck pile)
  free slice(deck), deck := none
  
  # Shuffle the deck
  sixgolf:prompt(table, $0="Shuffling...")
  variable(i)
  visually shuffle cards(deck pile, slice width(deck pile) / 2, slice height(deck pile) / 2)
  wait(second)
  
  # Deal 6 cards to each player
  sixgolf:prompt(table, $0="Each player gets six cards")
  sixgolf:deal cards(table, sli:cards:dealer area)
  sixgolf:deal cards(table, sli:cards:player area)
  wait for all cards(table)
  
  # Flip one card to the discard pile
  card := last child(deck pile)
  sixgolf:discard(card)

  set slice extra(table, 1, sixgolf:state:drawchoice)
  
  while(true) do(
    # Play happens here
    switch(get slice extra(table, 1)) do(
      case(sixgolf:state:drawchoice)
        sixgolf:draw choice(table)
      case(sixgolf:state:choose)
        sixgolf:choose(table)
      case(sixgolf:state:nextturn)
        sixgolf:next turn(table)
    )
    wait(1)
    if(keyval(key:esc) >= 1) then(break)
  )
  
  clean up six card golf game(table) 
  resume player
end

script, clean up six card golf game, table, begin
  free slice(table)
  $0=""
  $1=""
  $2=""
  $3=""
end

script, sixgolf:deal cards, table, code, begin
  variable(deck pile)
  deck pile := lookup slice(sli:cards:deck pile, table)
  variable(dest)
  dest := lookup slice(code, table)
  variable(i, card)
  # Six cards
  for(i, 0, 5) do(
    card := last child(deck pile)
    assert is card(card)
    gently reparent(card, dest)
    gently realign slice(card, edge:center, edge:center)
    move slice to(card, 0, 0, second / 2)
    wait(second / 4)
  )
  wait for all cards(dest)
  card := first child(dest)
  while(card) do(
    gently realign slice(card, edge:left, edge:top)
    card := next sibling(card)
  )
end

script, sixgolf:discard, card, begin
  assert is card(card)
  variable(table)
  table := lookup ancestor(sli:cards:table, card)
  if(not(table)) then(script error($0="sixgolf:discard: Whoops! Can't find table from card"), exit)
  variable(discard)
  discard := lookup slice(sli:cards:discard pile, table)
  gently reparent(card, discard)
  gently realign slice(card, edge:center, edge:center)
  variable(rely)
  rely := count cards(discard) / 3
  move slice to(card, 0, 0 -- rely, second / 2)
  wait for slice(card)
  gently realign slice(card, edge:left, edge:top)
  flip card face up(card)
end

script, sixgolf: draw choice, table, begin
  sixgolf: handle empty draw pile(table)

  sixgolf:prompt by turn(table, $0="Dealer's draw", $1="Draw a card")

  variable(deck pile, discard pile, draw choice)
  deck pile := lookup slice(sli:cards:deckpile, table)
  discard pile := lookup slice(sli:cards:discardpile, table)
  draw choice := lookup slice(sli:cards:drawchoice, table)
  
  variable(card)
  card := last child(deck pile)
  assert is card(card)
  gently reparent(card, draw choice)
  card := last child(discard pile)
  assert is card(card)
  gently reparent(card, draw choice)
  
  card := none
  while(not(card)) do(
    card := select a card(draw choice)
    wait(1)
  )
  assert is card(card)
  
  move slice by(card, 0, slice height(card) * 2 / 3 * -1, second / 2)
  wait for slice(card)
  flip card face up(card)
  
  # Return the other card to its pile
  if(slice child index(card) == 0) then(
    # other card goes to the discard pile
    gently reparent(last child(draw choice), discard pile)
  )else(
    # other card goes to the draw pile
    gently reparent(first child(draw choice), deck pile)
  )
  
  # Advance the table state machine
  set slice extra(table, 1, sixgolf:state:choose)
  
end

script, sixgolf:choose, table, begin

  variable(area)
  area := sixgolf:get current player area(table)
  
  variable(draw choice, new card)
  draw choice := lookup slice(sli:cards:drawchoice, table)
  new card := first child(draw choice)
  assert is card(new card)

  sixgolf:prompt by turn(table, $0="Dealer's turn", string sprintf(1, $2="Keep this %s?\nWhere to put it?", card short name(3, new card)))

  variable(card)
  card := none
  while(not(card)) do(
    card := select a card(area)
    wait(1)
    if(card == none) then(
      card short name(0, new card)
      show text box(1024)
      wait for text box
      if(check tag(tag:sixgolf:choice)) then(
        sixgolf:prompt(table, $0="Discarding...")
        sixgolf:discard(new card)
        set slice extra(table, 1, sixgolf:state:nextturn)
        exit
      )
    )
  )
  assert is card(card)

  sixgolf:prompt(table, $0="")
  
  if(card is face down(card)) then(
    flip card face up(card)
    wait(second)
  )

  sixgolf:prompt(table, string sprintf(0, $1="Replace %s", card short name(3, card)))

  move slice to screen pos(new card, slice screen x(card), slice screen y(card), second / 2)
  move slice by(card, 20 * sixgolf:away from player(table), -10, second / 2)
  wait for slice(card)
  wait for slice(new card)
  variable(after)
  after := previous sibling(card)
  gently reparent(card, draw choice)
  if(after) then(
    move slice above(new card, after)
  )else(
    set parent(new card, area)
    slice to back(new card)
  )
  realign slice(new card, edge:center, edge:center)
  set slice x(new card, 0)
  set slice y(new card, 0)
  gently realign slice(new card, edge:left, edge:top)
  sixgolf:discard(card)
  
  set slice extra(table, 1, sixgolf:state:nextturn)
  
end

script, sixgolf:next turn, table, begin
  variable(turn)
  turn := get slice extra(table, 0)
  set slice extra(table, 0, (turn ,xor, 1))
  set slice extra(table, 1, sixgolf:state:drawchoice)
end

script, sixgolf:get current player area, table, begin
  variable(turn)
  turn := get slice extra(table, 0)
  if(turn) then(
    exit(lookup slice(sli:cards:player area, table))
  )else(
    exit(lookup slice(sli:cards:dealer area, table))
  )
end

script, sixgolf:away from player, table, begin
  variable(turn)
  turn := get slice extra(table, 0)
  if(turn) then(
    exit(-1)
  )else(
    exit(1)
  )
end

script, sixgolf:towards player, table, begin
  variable(turn)
  turn := get slice extra(table, 0)
  if(turn) then(
    exit(1)
  )else(
    exit(-1)
  )
end

script, sixgolf:prompt, table, string id, begin
  variable(txt)
  txt := lookup slice(sli:cards:prompt text, table)
  set slice text(txt, string id)
end

script, sixgolf:prompt by turn, table, dealer string, player string, begin
  variable(turn)
  turn := get slice extra(table, 0)
  if(turn) then(
    sixgolf:prompt(table, player string)
  )else(
    sixgolf:prompt(table, dealer string)
  )
end

script, sixgolf: handle empty draw pile, table, begin
  variable(deck pile, discard pile)
  deck pile := lookup slice(sli:cards:deck pile)

  if(count cards(deck pile) == 0) then(

    sixgolf:prompt(table, $0="Oops! Time to shuffle")
    discard pile := lookup slice(sli:cards:discard pile)
    reparent cards(discard pile, deck pile)
    flip all cards face down(deck pile)
    visually shuffle cards(deck pile, slice width(deck pile) / 2, slice height(deck pile) / 2)
  
    # Flip one card to the discard pile
    variable(card)
    card := last child(deck pile)
    sixgolf:discard(card)
  )
end

