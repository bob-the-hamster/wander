plotscript, sandbar eachstep, begin
  if (current map == map:sandbar) then(
    if(read zone(11, hero x(me), hero y(me))) then(
      # Exit Sandbar map directly to riding ship
      suspend player
      fade screen out
      wait for hero(me)
      teleport to map(map:World map, 6, 31)
      set npc position(2, 6, 31)
      force mount vehicle(2)
      set hero direction(me, south)
      wait(1)
      fade screen in
      wait for hero(me)
      resume player
    )
  )
end

plotscript, sandbar onkeypress, begin
  if(check tag(tag:digging right now) == false) then(
    if (current map == map:sandbar && not(hero is walking(me))) then(
      if(inventory(item:shovel)) then(
        if(scripted use action) then(
          variable(x, y)
          x := x ahead of hero(me)
          y := y ahead of hero(me)
          if(read zone(1, x, y)) then(
            if(npc at spot(x, y)) then(
              # NPC is in the way
            )else(
              sandbar: dig a hole(x, y)
            )
          )
        )
      )
    )
  )
end

script, sandbar: dig a hole, x, y, begin
  suspend player
  set tag(tag:digging right now, true)

  variable(shovel)
  shovel := create npc(7, x, y, hero direction(me))
  play sound(sfx:gleeurp, false, true)
  wait(4)
  create a hole in the sand at(x, y)
  destroy npc(shovel)
  dig up an item(x, y)
  
  set tag(tag:digging right now, false)
  resume player
end

script, dig up an item, x, y, begin
  variable(n)
  n := random(1, 100)
  if(n <= 25) then(
    # Nothing
  )else if(n <= 30 || key is pressed(key:a)) then(
    # Starfish
    create random starfish(x, y)
  )else if(n <= 40) then(
    # Pebble
    create npc(8, x, y)
  )else if(n <= 60) then(
    create random shell(x, y)
  )else(
    # Coin
    create npc(9, x, y)
  )
end

script, create random shell, x, y, begin
  variable(id)
  id := random(10, 13)
  create npc(id, x, y)
end

plotscript, pick up item from sand, arg, npc, begin
  variable(item)
  item := read npc(npc, NPCstat:give item) -- 1
  if(item >= 0) then(
    play sound(sfx: treasure blip)
    get item name(1, item)
    show text box(831)
    suspend player
    wait for text box advance with arrow key
    resume player
  )
  destroy npc(npc)
end

plotscript, pick up coin from sand, arg, npc, begin
  variable(item)
  show text box(832)
  get money(1)
  play sound(sfx: treasure blip)
  suspend player
  wait for text box advance with arrow key
  resume player
  destroy npc(npc)
end

script, create random starfish, x, y, begin
  variable(id, ref)
  id := random(1, 5)
  ref := create npc(id, x, y)
  set npc extra(ref, 0, 1) # runaway count
  set npc speed(ref, 3)
  if(id == 5) then(
    # Special handling for triangle star
    set npc extra(ref, 0, 2) # runaway count
    set npc speed(ref, 10)
  )
  start starfish scuttle(ref)
end

script, start starfish scuttle, ref, zone=1, begin
  # Find a random diggable tile far enough away from the party
  random tile with zone(@starfish x, @starfish y, zone, 10)
  pathfind npc to(ref, starfish x, starfish y, 8)
  set npc extra(ref, 1, starfish x)
  set npc extra(ref, 2, starfish y)
  set timer(starfish timer, 0, 1, @update all starfish)
end

script, update all starfish, begin
  if(current map <> map:sandbar) then(exit script)
  # Loop through all npcs looking for starfish
  variable(ref, next ref, id)
  ref := next NPC reference()  # The first NPC
  while (ref) do (
    next ref := next NPC reference(ref)
    id := get npc id(ref)
    if(id >= 1 && id <= 5) then(
      update this starfish(ref)
    )
    ref := next ref
  )
  set timer(starfish timer, 0, 1, @update all starfish)
end

script, update this starfish, ref, begin
  if(get npc speed(ref) <= 5) then(
    if(npc is near hero(ref)) then(
      if(random(1, 10) <= 5) then(
        set npc speed(ref, 5)
      )
    )
    if(random(1, 10) <= 3 && get npc speed(ref) > 3) then(
      set npc speed(ref, get npc speed(ref) -- 1)
    )
  )
  if(npc is tile aligned(ref)) then(
    variable(tx, ty)
    tx := npc x(ref)
    ty := npc y(ref)
    if(is a hole in the sand(tx, ty)) then(
      if(get npc speed(ref) > 2) then(
        set npc speed(ref, 2)
      )
    )
  )
  if(not(npc is walking(ref))) then(
    variable(xtra)
    xtra := npc extra(ref, 0)
    set npc extra(ref, 0, xtra -- 1)
    if(xtra > 0) then(
      # Scuttle again
      variable(zone)
      zone := 1
      if(xtra == 1) then(zone := 2)
      start starfish scuttle(ref, zone)
    )else if(xtra == -1) then(
      destroy npc(ref)
    )else(
      # Reached final destination, go into the water
      set npc ignores walls(ref, true)
      walk npc to x(ref, npc extra(ref, 1))
      walk npc to y(ref, npc extra(ref, 2))
    )
  )
end

plotscript, catch starfish, arg, ref, begin
  variable(holes)
  holes := remember holes on screen
  if(fight formation(arg)) then(
    destroy npc(ref)
  )
  restore holes on screen(holes)
  free slice(holes)
end

script, remember holes on screen, begin
  variable(holes, h)
  holes := create container
  set slice visible(holes, false)
  variable(cx, cy, tx, ty)
  cx := large(camera pixel x / 20 -- 1, 0)
  cy := large(camera pixel y / 20 -- 1, 0)
  for(ty, cy, cy+11) do(
    if(ty >= map height) then(break)
    for(tx, cx, cx+17) do(
      if(tx >= map width) then(break)
      if(is a hole in the sand(tx, ty)) then(
        h := create container
        set parent(h, holes)
        set slice x(h, tx)
        set slice y(h, ty)
      )
    )
  )
  show value(child count(holes))
  exit returning(holes)
end

script, restore holes on screen, holes, begin
  variable(h, tx, ty)
  h := first child(holes)
  while(h) do(
    tx := slice x(h)
    ty := slice y(h)
    create a hole in the sand at(tx, ty)
    h := next sibling(h)
  )
end

script, create a hole in the sand at, tx, ty, begin
  write map block(tx, ty, 3, 3)
  write zone(1, tx, ty, false)
end

script, fill hole in the sand at, tx, ty, begin
  write map block(tx, ty, 0, 3)
  write zone(1, tx, ty, true)
end

script, is a hole in the sand, tx, ty, begin
  if(tx < 0 || tx >= map width) then(exit returning(false))
  if(ty < 0 || ty >= map height) then(exit returning(false))
  exit returning(read map block(tx, ty, 3) == 3)
end

